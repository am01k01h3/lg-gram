################################################################
#     MY QTILE CONFIG FILE
#
#     Author: AMOL KOLHE
#
#
#
################################################################
#
#     ABOUT THIS FILE
#
# keys = [
#    Key(modifier, "key" , action),
#    Key(modifier, "key" , action),
#    #and so on
#    ]
#
# groups = [
#   ]
#
# layouts = [
#     layout.layoutname(options),
#     layout.layoutname(options),
#     #and so on
#   ]
#
# widget_defaults = ( key=value, key=value, .... )
#
# screens =[
#   Screen(
#     top=bar.Bar(
#       widget.widgetname(options),
#     )
#     bottom=bar.Bar(
#       widget.widgetname(options),
#     )
#   )
# ]
#
# mouse = [
# ]
#
################################################################
#
#    My preferred top bar
#
# Menu Button, Workspaces / GroupBox, Quick Launch / App Launch Shortcuts, Window List / TaskList, Widgets, Systray, Logout button(s), Clock, Tiling Layout Name & Icon
#
#
################################################################


import os
import re
import socket
import subprocess
from libqtile.config import Key, Screen, Group, Drag, Click, Match
from libqtile.command import lazy
from libqtile.command.client import CommandClient
from libqtile import layout, bar, widget, hook
from libqtile import extension
from libqtile import qtile
from typing import List  # noqa: F401

##### DEFINING SOME VARIABLES #####
homedir = os.path.expanduser('~')
configdir = [ homedir + '/.config/qtile' ]
#print configdir
#myConfig = [ configdir + '/config.py' ]
#print myConfig
#myConfig = "/home/amol/.config/qtile/config.py"    # The Qtile config file location

# My Programs
dmenu = "dmenu_run -f -i -l 10 -nb '#151617' -nf '#d8d8d8' -sb '#a4bd00' -sf '#151617'"
rofi = "rofi -show drun -modi drun,run,window -show-icons -sidebar-mode -fake-transparency -terminal st -theme ~/.config/qtile/rofi/themes/Siera-alt.rasi -display-drun '' "
#rofimenu = "rofi -show drun -modi drun,run,window -show-icons -fake-transparency -display-drun 'Apps ' -display-run 'Cmds ' -display-window 'Windows ' -scroll-method 1 -sidebar-mode -lines 20 -columns 2 -terminal st -theme ~/.config/rofi/themes/slate-menu.rasi"
rofimenu = "rofi -show drun -modi drun,run,window -show-icons -fake-transparency -display-drun 'Apps ' -display-run 'Cmds ' -display-window 'Windows ' -scroll-method 0 -sidebar-mode -lines 20 -columns 1 -terminal st -theme ~/.config/qtile/rofi/themes/arc-red-dark-menu.rasi"

rofiwindowswitcher = "rofi -show window -modi window -cycle -show-icons -display-window 'Windows ' -window-format '{w} {c} {t} {n}' -scroll-method 0 -lines 10 -columns 10 -eh 2 -padding 2% -spacing 2% -fake-transparency -theme ~/.config/qtile/rofi/themes/arc-red-dark.rasi"


Terminal1 = "alacritty -e bash -l"  # First choice for terminal
Terminal2 = "sakura -l"  # First choice for terminal
#Terminal2 = "st -e bash -l"         # Second choice for terminal
TerminalBackup = "urxvt -e bash -l"  # Backup option, one thats in the repos and launched with Ctrl + Alt + t

FileManager = "pcmanfm"
#FileManager = "rox-filer -n"

#WebBrowser = "qutebrowser"
WebBrowser = "firefox"

TextEditor = "gedit"

VolumeMuteCmd       = "/home/amol/.config/qtile/volume.sh mute"
VolumeUnmuteCmd     = "/home/amol/.config/qtile/volume.sh mute"
VolumeUpCmd         = "/home/amol/.config/qtile/volume.sh up"
VolumeDownCmd       = "/home/amol/.config/qtile/volume.sh down"
#VolumeMuteCmd       = "pactl set-sink-mute @DEFAULT_SINK@ toggle"
#VolumeUnmuteCmd     = "pactl set-sink-mute @DEFAULT_SINK@ false"
#VolumeUpCmd         = "pactl set-sink-volume @DEFAULT_SINK@ +5%"
#VolumeDownCmd       = "pactl set-sink-volume @DEFAULT_SINK@ -5%"

BrightnessUpCmd     = "/home/amol/.config/qtile/brightness.sh up"
BrightnessDownCmd   = "/home/amol/.config/qtile/brightness.sh down"
#BrightnessUpCmd = [ homedir + '/.config/qtile/brightness.sh up' ]
#BrightnessDownCmd = [ homedir + '/.config/qtile/brightness.sh down' ]
#BrightnessUpCmd = "sudo brightnessctl s +1%"
#BrightnessDownCmd = "sudo brightnessctl s 1%-"

#VolumeUpCmd = "pactl set-sink-mute @DEFAULT_SINK@ false ; pactl set-sink-volume @DEFAULT_SINK@ +5%"
#VolumeDownCmd = "pactl set-sink-mute @DEFAULT_SINK@ false ; pactl set-sink-volume @DEFAULT_SINK@ -5%"
#XF86MonBrightnessDown   :Exec sudo brightnessctl s 1%-
#XF86MonBrightnessUp     :Exec sudo brightnessctl s +1%

#XF86AudioMute           :Exec pactl set-sink-mute 0 toggle
#XF86AudioLowerVolume    :Exec pactl set-sink-mute 0 false ; pactl set-sink-volume 0 -5%
#XF86AudioRaiseVolume    :Exec pactl set-sink-mute 0 false ; pactl set-sink-

#ScreenshotCmd = "~/.fluxbox/bin/screenshot"



##### COLORS #####
colors = [
            #["#2c2c2c", "#2c2c2c"], # panel background
            #["#282a36", "#282a36"], # panel background
            ["#000000", "#000000"], # panel background
            #["#808080", "#808080"], # background for current screen tab
            #["#606060", "#606060"], # background for current screen tab
            #["#434758", "#434758"], # background for current screen tab
            ["#434752", "#434752"], # background for current screen tab
            ["#ffffff", "#ffffff"], # font color for group names
            ["#ff5555", "#ff5555"], # background color for layout widget
            ["#A77AC4", "#A77AC4"], # Pink Purple
            ["#7197E7", "#7197E7"], # Blue
         ]

mycolorlime     = "#a4bd00",
mycolororange   = "#ec883a",
mycolorred      = "#ff4444",
mycolorteal     = "#298876",
mycolorpink     = "#d33264",
mycolorblue     = "#5599cc",

#color1 gray
#color2 #888888
#color3 #eeeeee
#color4 #ff4444
#color5 #a4bd00
#color6 #ec883a
#color7 #d33264
#color8 #77bbff
#color9 #5599cc


##### KEYBOARD SHORTCUTS #####
mod     = "mod4"                                     # DO NOT REMOVE mod = "modkey"
Win     = "mod4"                                     # Sets mod key to SUPER/WINDOWS
Control = "control"
Alt     = "mod1"
Shift   = "shift"

VolumeMuteKey       = "XF86AudioMute"
VolumeDownKey       = "XF86AudioLowerVolume"
VolumeUpKey         = "XF86AudioRaiseVolume"

BrightnessUpKey     = "XF86MonBrightnessUp"
BrightnessDownKey   = "XF86MonBrightnessDown"

#slash = "/"

keys = [
    #Key([Control, Alt], "delete", lazy.shutdown()),
    #Key([Win], "x", lazy.shutdown()),
    Key([Win, Shift], "q", lazy.shutdown()),

    # Start Terminal
    Key([Win], "Return", lazy.spawn(Terminal1)),

    # Start Terminal
    Key([Alt], "Return", lazy.spawn(Terminal2)),

    # Start Rofi
    Key([Win], "space", lazy.spawn(rofimenu)),

    # Start dmenu
    Key([Alt], "space", lazy.spawn(dmenu)),

    # Reload Qtile
    Key([Win, Control], "r", lazy.restart()),

    # Switch window focus to other pane(s) of stack
    Key([Win], "Tab", lazy.layout.next()),
    #Key([Alt], "Tab", lazy.spawn(rofiwindowswitcher)),

    # Window minimize
    Key([Win], "n", lazy.window.toggle_minimize()),
    Key([Win], "t", lazy.window.toggle_floating()),
    Key([Win], "f", lazy.window.toggle_fullscreen()),
    Key([Win], "g", lazy.togroup()),
    Key([Win], "slash", lazy.findwindow()),

    # Switch between windows in current stack pane
    Key([Win], "j", lazy.layout.down()),
    Key([Win], "k", lazy.layout.up()),
    Key([Win], "h", lazy.layout.left()),
    Key([Win], "l", lazy.layout.right()),

    # Move windows up or down in current stack
    Key([Win, Control], "j", lazy.layout.shuffle_down()),
    Key([Win, Control], "k", lazy.layout.shuffle_up()),
    Key([Win, Control], "h", lazy.layout.shuffle_left()),
    Key([Win, Control], "l", lazy.layout.shuffle_right()),

    # Grow windows
    Key([Win, Alt], "h", lazy.layout.grow_left()),
    Key([Win, Alt], "l", lazy.layout.grow_right()),
    Key([Win, Alt], "j", lazy.layout.grow_down()),
    Key([Win, Alt], "k", lazy.layout.grow_up()),

    # Flip windows
    Key([Win, Shift], "h", lazy.layout.flip_left()),
    Key([Win, Shift], "l", lazy.layout.flip_right()),
    Key([Win, Shift], "j", lazy.layout.flip_down()),
    Key([Win, Shift], "k", lazy.layout.flip_up()),

    # Swap panes of split stack
    Key([Win, "shift"], "space", lazy.layout.rotate()),

    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key([Win, "shift"], "Return", lazy.layout.toggle_split()),

    # Toggle between different layouts as defined below
    Key([Win, Control, Shift], "Tab", lazy.next_layout()),
    Key([Win],          "q", lazy.window.kill()),

    #Special Keys
    Key([], VolumeMuteKey,      lazy.spawn(VolumeMuteCmd)),
    Key([], VolumeUpKey,        lazy.spawn(VolumeUpCmd)),
    Key([], VolumeDownKey,      lazy.spawn(VolumeDownCmd)),
    Key([], BrightnessUpKey,    lazy.spawn(BrightnessUpCmd)),
    Key([], BrightnessDownKey,  lazy.spawn(BrightnessDownCmd)),

    # My Apps
    Key([Win],          "e", lazy.spawn(FileManager)),
    Key([Control, Alt], "i", lazy.spawn(WebBrowser)),
    Key([Control, Alt], "t", lazy.spawn(TerminalBackup)),
    Key([Control, Alt], "n", lazy.spawn(TextEditor)),

    ## Workspace/Group Keys

    ## Switch to another group
    # Key([Win], "1", lazy.group["1"].toscreen()),

    ## Send current window to another group
    # Key([Win, "shift"], "1", lazy.window.togroup("1")),

    # Run Command
    Key([Win], "r", lazy.spawncmd()),

    #Key([Win], "r", lazy.spawn(rofi)),

    Key([Win, Alt], 'r', lazy.run_extension(extension.DmenuRun(
        dmenu_prompt=">",
        dmenu_font="Andika-8",
        background="#15181a",
        foreground="#00ff00",
        selected_background="#079822",
        selected_foreground="#fff",
        dmenu_height=24,  # Only supported by some dmenu forks
    ))),
    #dmenu_run -f -i -l 10 -nb '#151617' -nf '#d8d8d8' -sb '#a4bd00' -sf '#151617'
    #Key([Win], 'r', lazy.run_extension(extension.DmenuRun(
    #    dmenu_prompt = ">",
    #    #dmenu_font = "Arial",
    #    #font='DejaVu Sans',
    #    #font='Roboto Mono for Powerline',
    #    #font="Ubuntu Mono",
    #    #font="Awesome Font",
    #    #background = "#151617",
    #    background = "#2c2c2c",
    #    foreground = "#d8d8d8",
    #    selected_background = "#a4bd00",
    #    selected_foreground = "#151617",
    #    dmenu_bottom = False,
    #    dmenu_ignorecase = True,
    #    dmenu_lines = 12,
    #    #dmenu_height=24,  # Only supported by some dmenu forks
    #))),

    ## Try out window list
    #Key([Win], "F3", lazy.run_extension(extension.Windowlist(
    #    all_groups = true,
    #) )),

]


##### GROUPS #####
#groups = [Group(i) for i in "12345678"]
#
#for i in groups:
#    keys.extend([
#        # mod1 + letter of group = switch to group
#        Key([mod], i.name, lazy.group[i.name].toscreen()),
#
#        # mod1 + shift + letter of group = switch to & move focused window to group
#        Key([mod, "shift"], i.name, lazy.window.togroup(i.name)),
#    ])
#

groups = []

group_names = [("1", {'layout': 'monadtall'}),
               ("2", {'layout': 'zoomy'}),
               ("3", {'layout': 'zoomy2'}),
               ("4", {'layout': 'ratiotile'}),
               ("5", {'layout': 'tile'}),
               ("6", {'layout': 'stack'}),
               ("7", {'layout': 'max'}),
               ("8", {'layout': 'floating'}),
              ]

groups = [Group(name, **kwargs) for name, kwargs in group_names]

for i, (name, kwargs) in enumerate(group_names, 1):
    keys.append(Key([mod], str(i), lazy.group[name].toscreen()))        # Switch to another group
    keys.append(Key([mod, "shift"], str(i), lazy.window.togroup(name))) # Send current window to another group



##### THE LAYOUTS #####
#layouts = [
#    layout.Max(),
#    layout.Stack(num_stacks=2)
#]

##### DEFAULT THEME SETTINGS FOR LAYOUTS #####
layout_theme = {"border_width": 2,
                "margin": 10,
                "max_border_width": 2,
                "border_focus": "#404040",
                "border_normal": "#000000",
                #"border_focus": "AD69AF", #Pink
                #"border_focus": "a4bd00", #Lime
                #"border_focus_stack": "888888",
                #"border_normal_stack": "1D2330",
                }

layouts = [
    layout.MonadTall(ratio=0.6,**layout_theme),
    layout.Tile(shift_windows=False, **layout_theme),
    layout.Floating(**layout_theme),
    layout.MonadTall(name='zoomy2',ratio=0.75,**layout_theme),
    layout.Columns(**layout_theme),
    layout.Zoomy(
        columnwidth = 250,
        **layout_theme
        ),
    layout.TreeTab(
         font = "Ubuntu",
         fontsize = 10,
         #sections = ["FIRST", "SECOND"],
         section_fontsize = 11,
         #bg_color = colors[0],
         active_bg = colors[2],
         active_fg = colors[0],
         inactive_bg = colors[1],
         inactive_fg = colors[2],
         padding_x = 16,
         padding_y = 16,
         section_top = 10,
         panel_width = 200,
         ),
    layout.Max(**layout_theme),
    layout.Matrix(**layout_theme),
    layout.RatioTile(fancy=True,**layout_theme),
    layout.VerticalTile(**layout_theme),
    layout.Stack(num_stacks=2, autosplit=False,**layout_theme),
    #layout.Slice( **layout_theme),
    #layout.MonadWide(**layout_theme),
    #layout.Bsp(**layout_theme),
]



##### PROMPT #####
#prompt = "{0}@{1}: ".format(os.environ["USER"], socket.gethostname())
#prompt = "run: "
#prompt = "> "


##### DEFAULT WIDGET SETTINGS #####
widget_defaults = dict(
    #font = 'DejaVu Sans',
    #font = 'Roboto Mono for Powerline',
    #font = "Ubuntu Mono",
    #font = "Awesome Font",
    font = "Ubuntu Bold",
    fontsize = 10,
    foreground = colors[2],
    background = colors[0],
    rounded = False,
    #rounded = True,
    linewidth = 0,
    padding = 5,
)
extension_defaults = widget_defaults.copy()

#separator_medium = dict(
#    linewidth = 0,
#    padding = 5,
#)

##### MOUSE CALLBACKS #####

#def open_calendar():
#    #calendar_executable = "gsimplecal next_month"
#    calendar_executable = "gnome-calendar"
#    #lazy.spawn(calendar_executable)
#    qtile.cmd_spawn(calendar_executable)

##### WIDGETS #####

def open_calendar():
    qtile.cmd_spawn('gsimplecal next_month')

def init_widgets_list():
    widgets_list = [
               widget.Sep(
                        linewidth = 0,
                        padding = 5,
                        ),
               widget.LaunchBar(
                        progs = (
                          #(software_name, command_to_execute, comment)
                          ('Menu', rofimenu, ''),
                        ),
                        default_icon = "/home/amol/.config/qtile/icons/view-grid.png",
                        padding = 0,
                        ),
               widget.Sep(
                        linewidth = 0,
                        padding = 5,
                        ),
               widget.LaunchBar(
                        progs = (
                          #(software_name, command_to_execute, comment)
                          ('Firefox', 'firefox', ''),
                        ),
                        default_icon="/home/amol/.config/qtile/icons/firefox.png",
                        padding = 0,
                        ),
               widget.Sep(
                        linewidth = 0,
                        padding = 5,
                        ),
               widget.LaunchBar(
                        progs = (
                          #(software_name, command_to_execute, comment)
                          ('Qutebrowser', 'qutebrowser', ''),
                        ),
                        default_icon="/home/amol/.config/qtile/icons/qutebrowser.png",
                        padding = 0,
                        ),
               widget.Sep(
                        linewidth = 0,
                        padding = 5,
                        ),
               widget.LaunchBar(
                        progs = (
                          #(software_name, command_to_execute, comment)
                          ('File Manager', 'pcmanfm', ''),
                        ),
                        default_icon="/home/amol/.config/qtile/icons/pcmanfm.png",
                        padding = 0,
                        ),
               widget.Sep(
                        linewidth = 0,
                        padding = 5,
                        ),
               widget.LaunchBar(
                        progs = (
                          #(software_name, command_to_execute, comment)
                          ('Text Editor', 'gedit', ''),
                        ),
                        default_icon="/home/amol/.config/qtile/icons/texteditor.png",
                        padding = 0,
                        ),
               widget.Sep(
                        linewidth = 0,
                        padding = 5,
                        ),
               widget.LaunchBar(
                        progs = (
                          #(software_name, command_to_execute, comment)
                          ('Terminal', Terminal1, ''),
                        ),
                        default_icon="/home/amol/.config/qtile/icons/terminal2.png",
                        padding = 0,
                        ),
               widget.Sep(
                        linewidth = 0,
                        padding = 5,
                        ),
               widget.LaunchBar(
                        progs = (
                          #(software_name, command_to_execute, comment)
                          ('Cryptomator', 'cryptomator', ''),
                        ),
                        default_icon="/home/amol/.config/qtile/icons/cryptomator.png",
                        padding = 0,
                        ),
               widget.Sep(
                        linewidth = 0,
                        padding = 5,
                        ),
               widget.LaunchBar(
                        progs = (
                          #(software_name, command_to_execute, comment)
                          ('KeePassXC', 'keepassxc', ''),
                        ),
                        default_icon="/home/amol/.config/qtile/icons/keepassxc.png",
                        padding = 0,
                        ),
               widget.Sep(
                        linewidth = 0,
                        padding = 5,
                        ),
               #widget.WindowName(
               #         padding = 5
               #         ),
               widget.TaskList(
                        linewidth = 10,
                        highlight_method = 'block' ,
                        #highlight_method = 'border' ,
                        #title_width_method = 'uniform',
                        max_title_width = 100,
                        border = colors[1],
                        #fmt = 'center',
                        icon_size = 24,
                        #margin_y = 5,
                        borderwidth = 5,
                        padding = 8,
                        ),
               widget.Sep(
                        linewidth = 0,
                        padding = 10,
                        ),
               widget.Prompt(
                        prompt="> ",
                        ignore_dups_history=True,
                        #font="Ubuntu Mono",
                        font="DejaVu Sans Mono",
                        foreground = colors[3],
                        padding=10,
                        ),
               widget.Sep(
                        linewidth = 0,
                        padding = 10,
                        ),
               #widget.Notify(fmt=" 🔥 {} "),
               #widget.TextBox(
               #         text='',
               #         background = colors[5],
               #         foreground = colors[0],
               #         padding=0,
               #         fontsize=37
               #         ),

               widget.Sep(
                        linewidth = 0,
                        padding = 10,
                        ),
               #widget.TextBox(
               #         text='',
               #         background = colors[2],
               #         foreground = colors[5],
               #         padding=0,
               #         fontsize=37
               #         ),
               #widget.TextBox(
               #         text="🕒",
               #         foreground=colors[2],
               #         background=colors[0],
               #         fontsize = 12,
               #         padding = 1,
               #         ),
               widget.CurrentLayout(
                        foreground = "#888888",
                        fontsize = 10,
                        padding = 1,
                        ),
               widget.CurrentLayoutIcon(
                        scale = 0.6,
                        padding = 5,
                        ),
               widget.Sep(
                        linewidth = 0,
                        padding = 2,
                        ),
               widget.Clock(
                        foreground = "#a4bd00",
                        format="%a %b %d %I:%M",
                        fontsize = 12,
                        mouse_callbacks = { 'Button1': open_calendar },
                        ),
               widget.Sep(
                        linewidth = 0,
                        padding = 5,
                        ),
               widget.GroupBox(
                        #font="Ubuntu Bold",
                        #fontsize = 10,
                        padding_y = 5,
                        padding_x = 5,
                        borderwidth = 1,
                        #active = "a4bd00",
                        active = colors[2],
                        inactive = colors[2],
                        highlight_method = "block",
                        #this_current_screen_border = "#a4bd00",
                        this_current_screen_border = colors[1],
                        #this_screen_border = colors [1],
                        #other_current_screen_border = colors[0],
                        #other_screen_border = colors[0],
                        #margin_y = 0,
                        #margin_x = 0,
                        ),
               widget.Sep(
                        linewidth = 0,
                        padding = 5,
                        ),
               #widget.TextBox(
               #         text=" ♫",
               #         foreground = colors[5],
               #         fontsize = 14,
               #         padding = 5,
               #         ),
               widget.Cmus(
                        max_chars = 40,
                        update_interval = 0.5,
                        play_color = colors[2],
                        noplay_color = colors[1],
                        padding = 5,
                        ),
               widget.Sep(
                        linewidth = 0,
                        padding = 10,
                        ),
               #widget.TextBox(
               #         text='',
               #         padding=0,
               #         fontsize=37
               #         ),
               #widget.TextBox(
               #         text=" ⟳",
               #         padding = 5,
               #         foreground=colors[2],
               #         fontsize=14
               #         ),
               #widget.Pacman(
               #         execute = "alacritty",
               #         update_interval = 1800,
               #         ),
               #widget.TextBox(
               #         text="Updates",
               #         padding = 5,
               #         foreground=colors[2],
               #         ),
               #widget.TextBox(
               #         text='',
               #         background = colors[5],
               #         padding=0,
               #         fontsize=37
               #         ),
               #widget.TextBox(
               #         text=" ↯",
               #         foreground=colors[2],
               #         padding = 0,
               #         fontsize=14
               #         ),
               #widget.TextBox(
               #         text='',
               #         foreground = colors[5],
               #         padding=0,
               #         fontsize=37
               #         ),
               #widget.TextBox(
               #         #text="TEMP",
               #         text="T",
               #         foreground = "#888888",
               #         background=colors[0],
               #         fontsize = 12,
               #         padding = 0,
               #         ),
               widget.ThermalSensor(
                        metric = True,
                        update_interval = 5,
                        foreground = "#d33264",
                        padding = 5,
                        ),
               #widget.TextBox(
               #         #text="CPU",
               #         text="C",
               #         foreground = "#888888",
               #         background=colors[0],
               #         fontsize = 12,
               #         padding = 0,
               #         ),
               #widget.CPU(
               #         fmt = '{}',
               #         padding = 5
               #         ),
               widget.CPUGraph(
                        type = 'box',
                        line_width = 3,
                        fill_color = "#b4ff00",
                        graph_color = "#b4ff00",
                        border_width = 0,
                        width = 32,
                        margin_y = 6,
                        padding = 1,
                        ),
               #widget.Sep(
               #         linewidth = 0,
               #         foreground = colors[0],
               #         padding = 5,
               #         ),
               #widget.TextBox(
               #         #text="Mem",
               #         text="M",
               #         foreground = "#888888",
               #         fontsize = 12,
               #         padding = 0,
               #         ),
               widget.Memory(
                        format = '{MemUsed}M',
                        foreground = "#ec883a",
                        padding = 5,
                        #mouse_callbacks = {
                        #    'Button1': lambda qtile: qtile.cmd_spawn(myTerm + ' -e htop')
                        #    },
                        ),
               widget.MemoryGraph(
                        type = 'box',
                        #type = 'linefill',
                        frequency = 5,
                        line_width = 1,
                        fill_color = "#ec883a",
                        graph_color = "#ec883a",
                        border_width = 0,
                        width = 24,
                        margin_y = 6,
                        padding = 5,
                        ),
               #widget.Sep(
               #         linewidth = 0,
               #         foreground = "#888888",
               #         padding = 10,
               #         ),
               #widget.TextBox(
               #         #text="Disk",
               #         text="D",
               #         foreground = "#888888",
               #         background=colors[0],
               #         padding = 0,
               #         ),
               widget.DF(
                        format = '{uf}{m}',
                        measure = 'G',
                        update_interval	= 300,
                        foreground = "#ff4444",
                        padding = 5,
                        ),
               widget.HDDBusyGraph(
                        type = 'box',
                        #type = 'linefill',
                        frequency = 1,
                        line_width = 1,
                        fill_color = "#ff4444",
                        graph_color = "#ff4444",
                        border_width = 0,
                        width = 24,
                        margin_y = 6,
                        padding = 5,
                        ),
               #widget.Sep(
               #         linewidth = 0,
               #         foreground = colors[0],
               #         padding = 5,
               #         ),

               #widget.TextBox(
               #         text='',
               #         background = colors[5],
               #         padding=0,
               #         fontsize=37
               #         ),
               #widget.TextBox(
               #         #text=" ↯",
               #         #text="Net",
               #         text="N",
               #         foreground = "#888888",
               #         background=colors[0],
               #         fontsize = 12,
               #         padding = 0,
               #         ),
               #widget.Net(
               #         interface = "wlp2s0",
               #         update_interval = 3,
               #         foreground = "#298876",
               #         width = 80,
               #         fontsize = 8,
               #         padding = 5,
               #         ),
               widget.NetGraph(
                        interface = "auto",
                        #interface = "wlp2s0",
                        bandwidth_type = "down",
                        frequency = 3,
                        #type = 'line',
                        #type = 'linefill',
                        type = 'box',
                        line_width = 1,
                        #fill_color = "#298876",
                        fill_color = colors[2],
                        graph_color = "#298876",
                        border_width = 0,
                        margin_y = 6,
                        width = 16,
                        padding = 5,
                        ),
               widget.NetGraph(
                        interface = "auto",
                        #interface = "wlp2s0",
                        bandwidth_type = "up",
                        #type = 'line',
                        #type = 'linefill',
                        type = 'box',
                        line_width = 1,
                        #fill_color = "#298876",
                        #fill_color = colors[2],
                        fill_color = colors[0],
                        graph_color = "#5599cc",
                        border_width = 0,
                        margin_y = 6,
                        width = 16,
                        padding = 5,
                        ),
               #widget.Sep(
               #         linewidth = 0,
               #         foreground = colors[0],
               #         padding = 10,
               #         ),
               #widget.TextBox(
               #         text='',
               #         foreground = colors[5],
               #         padding=0,
               #         fontsize=37
               #         ),
               #widget.TextBox(
               #         text=" ☵",
               #         padding = 5,
               #         foreground=colors[2],
               #         background=colors[5],
               #         fontsize=14
               #         ),
               #widget.TextBox(
               #         text='',
               #         background = colors[5],
               #         foreground = colors[0],
               #         padding=0,
               #         fontsize=37
               #         ),
               #widget.Sep(
               #         linewidth = 0,
               #         padding = 10,
               #         foreground = colors[0],
               #         ),
               #widget.TextBox(
               #         text=" 🔊",
               #         padding = 0,
               #         fontsize=14
               #         ),
               #widget.PulseVolume(
               #         ),
               #widget.Volume(
               #         #get_volume_command = "",
               #         mute_command = "pactl set-sink-mute 0 true",
               #         volume_up_command = "pactl set-sink-mute 0 false ; pactl set-sink-volume 0 +5%",
               #         volume_down_command = "pactl set-sink-mute 0 false ; pactl set-sink-volume 0 -5%",
               #         foreground = "888888",
               #         padding = 5
               #         ),
               widget.Systray(
                        background=colors[0],
                        padding = 5,
                        ),
               #         text="BAT",
               #         foreground = "#888888",
               #         background=colors[0],
               #         fontsize = 12,
               #         padding = 0,
               #         ),
               widget.BatteryIcon(
                        #theme_path="/home/amol/.config/qtile/icons/laptop_battery.png",
                        update_interval=2,
                        linewidth = 0,
                        padding = 0,
                        ),
               widget.Battery(
                        #theme_path="/home/amol/.config/qtile/icons/laptop_battery.png",
                        #format="{char} {percent:2.0%}  {hour:d}:{min:02d} ",
                        format="{percent:2.0%}  {hour:d}:{min:02d} {char}",
                        charge_char="⚡", discharge_char="🔋",
                        full_char="⚡", unknown_char="⚡",
                        empty_char="⁉️ ", update_interval=2,
                        linewidth = 0,
                        padding = 0,
                        ),
               widget.Sep(
                        linewidth = 0,
                        padding = 5,
                        ),
               widget.LaunchBar(
                        progs = (
                          #(software_name, command_to_execute, comment)
                          ('Suspend', 'systemctl suspend', 'Sleep'),
                        ),
                        default_icon="/home/amol/.config/qtile/icons/suspend.png",
                        padding = 0,
                        ),
               widget.Sep(
                        linewidth = 0,
                        padding = 0,
                        ),
               widget.LaunchBar(
                        progs = (
                          #(software_name, command_to_execute, comment)
                          ('logoff', 'qshell:self.qtile.cmd_shutdown()', 'logout from qtile'),
                        ),
                        default_icon="/home/amol/.config/qtile/icons/logoff.png",
                        padding = 0,
                        ),
               widget.Sep(
                        linewidth = 0,
                        padding = 5,
                        ),
               #widget.TextBox(
               #widget.BatteryIcon(
               #         #theme_path="/home/amol/.config/qtile/icons/laptop_battery.png",
               #         ),
              #if os.path.isdir("/sys/module/battery"):
              #  widgets_list.insert(-1, widget.Battery(format=" {char} {percent:2.0%} ",
              #      charge_char="⚡", discharge_char="🔋",
              #      full_char="⚡", unknown_char="⚡",
              #      empty_char="⁉️ ", update_interval=2,
              #      show_short_text=False,
              #      default_text=""))
              #  widgets_list.insert(-1, widget.Battery(fmt="<span color='#666'>{}</span> ",
              #      format="{hour:d}:{min:02d}",
              #      update_interval=2, show_short_text=True,
              #      default_text=""))
              ]

    return widgets_list

##### SCREENS ##### (TRIPLE MONITOR SETUP)

#screens = [
#    Screen(
#    #        bottom=bar.Bar(
#    #            [
#    #                widget.GroupBox(),
#    #                widget.Prompt(),
#    #                widget.WindowName(),
#    #                #widget.TextBox("default config", name="default"),
#    #                widget.Systray(),
#    #                #widget.Clock(format='%Y-%m-%d %a %I:%M %p'),
#    #                widget.Clock(format='%d %b, %a %02k:%M'),
#    #            ],
#    #            ,
#    #        ),
#    #    ),
#    ]
#


def init_widgets_screen1():
    widgets_screen1 = init_widgets_list()
    return widgets_screen1                       # Slicing removes unwanted widgets on Monitors 1,3

def init_widgets_screen2():
    widgets_screen2 = init_widgets_list()
    return widgets_screen2                       # Monitor 2 will display all widgets in widgets_list

def init_screens():
    return [Screen(top=bar.Bar(widgets=init_widgets_screen1(), opacity=0.9, size=32)),
            Screen(top=bar.Bar(widgets=init_widgets_screen2(), opacity=0.9, size=32)),
            Screen(top=bar.Bar(widgets=init_widgets_screen1(), opacity=0.9, size=32))]

if __name__ in ["config", "__main__"]:
    screens = init_screens()
    widgets_list = init_widgets_list()
    widgets_screen1 = init_widgets_screen1()
    widgets_screen2 = init_widgets_screen2()

##### DRAG FLOATING WINDOWS #####
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front())
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: List
main = None
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False

##### FLOATING WINDOWS #####
#floating_layout = layout.Floating(float_rules=[
#    {'wmclass': 'confirm'},
#    {'wmclass': 'dialog'},
#    {'wmclass': 'download'},
#    {'wmclass': 'error'},
#    {'wmclass': 'file_progress'},
#    {'wmclass': 'notification'},
#    {'wmclass': 'splash'},
#    {'wmclass': 'toolbar'},
#    {'wmclass': 'confirmreset'},  # gitk
#    {'wmclass': 'makebranch'},  # gitk
#    {'wmclass': 'maketag'},  # gitk
#    {'wname': 'branchdialog'},  # gitk
#    {'wname': 'pinentry'},  # GPG key password entry
#    {'wmclass': 'ssh-askpass'},  # ssh-askpass
#])
floating_layout = layout.Floating()
auto_fullscreen = True
focus_on_window_activation = "smart"

##### STARTUP APPLICATIONS #####
@hook.subscribe.startup_once
def start_once():
    home = os.path.expanduser('~')
    subprocess.call([home + '/.config/qtile/startup.sh'])

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
